// <auto-generated />
using System;
using FightingGameServer_Rest.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FightingGameServer_Rest.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FightingGameServer_Rest.Models.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AttackSpeed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("attack_speed");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Dexterity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("dexterity");

                    b.Property<int>("Health")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("health");

                    b.Property<int>("Intelligence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("intelligence");

                    b.Property<float>("MoveSpeed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("move_speed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("name");

                    b.Property<int>("Strength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("strength");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("character", (string)null);
                });

            modelBuilder.Entity("FightingGameServer_Rest.Models.CustomCommand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("character_id");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("command");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.Property<int>("SkillId")
                        .HasColumnType("int")
                        .HasColumnName("skill_id");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SkillId");

                    b.HasIndex("PlayerId", "CharacterId", "SkillId");

                    b.ToTable("custom_command", (string)null);
                });

            modelBuilder.Entity("FightingGameServer_Rest.Models.MatchRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("ended_at");

                    b.Property<int?>("LoserPlayerCharacterId")
                        .HasColumnType("int")
                        .HasColumnName("loser_player_character_id");

                    b.Property<int?>("LoserPlayerId")
                        .HasColumnType("int")
                        .HasColumnName("loser_player_id");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("started_at");

                    b.Property<int?>("WinnerPlayerCharacterId")
                        .HasColumnType("int")
                        .HasColumnName("winner_player_character_id");

                    b.Property<int?>("WinnerPlayerId")
                        .HasColumnType("int")
                        .HasColumnName("winner_player_id");

                    b.HasKey("Id");

                    b.HasIndex("LoserPlayerCharacterId");

                    b.HasIndex("LoserPlayerId");

                    b.HasIndex("WinnerPlayerCharacterId");

                    b.HasIndex("WinnerPlayerId");

                    b.ToTable("match_record", null, t =>
                        {
                            t.HasCheckConstraint("CK_MatchRecord_EndedAtGreaterThanStartedAt", "ended_at > started_at");
                        });
                });

            modelBuilder.Entity("FightingGameServer_Rest.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExperiencePoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("experience_point");

                    b.Property<int>("MatchCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("match_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(-1)
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("player", (string)null);
                });

            modelBuilder.Entity("FightingGameServer_Rest.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AttackSpeedCoefficient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("attack_speed_coefficient");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int")
                        .HasColumnName("character_id");

                    b.Property<int>("CoolTime")
                        .HasColumnType("int")
                        .HasColumnName("cool_time");

                    b.Property<string>("DefaultCommand")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("default_command");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<float>("DexterityCoefficient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("dexterity_coefficient");

                    b.Property<float>("HealthCoefficient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("health_coefficient");

                    b.Property<float>("IntelligenceCoefficient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("intelligence_coefficient");

                    b.Property<bool>("IsPassive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("is_passive");

                    b.Property<float>("MoveSpeedCoefficient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("move_speed_coefficient");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<int>("Range")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("range");

                    b.Property<float>("StrengthCoefficient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f)
                        .HasColumnName("strength_coefficient");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("skill", (string)null);
                });

            modelBuilder.Entity("FightingGameServer_Rest.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("login_id");

                    b.Property<string>("LoginPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login_password");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("salt");

                    b.HasKey("Id");

                    b.HasIndex("LoginId")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("FightingGameServer_Rest.Models.CustomCommand", b =>
                {
                    b.HasOne("FightingGameServer_Rest.Models.Character", "Character")
                        .WithMany("CustomCommands")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FightingGameServer_Rest.Models.Player", "Player")
                        .WithMany("CustomCommands")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FightingGameServer_Rest.Models.Skill", "Skill")
                        .WithMany("CustomCommands")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Player");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("FightingGameServer_Rest.Models.MatchRecord", b =>
                {
                    b.HasOne("FightingGameServer_Rest.Models.Character", "LoserPlayerCharacter")
                        .WithMany("LostMatchRecords")
                        .HasForeignKey("LoserPlayerCharacterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FightingGameServer_Rest.Models.Player", "LoserPlayer")
                        .WithMany("LostMatchRecords")
                        .HasForeignKey("LoserPlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FightingGameServer_Rest.Models.Character", "WinnerPlayerCharacter")
                        .WithMany("WonMatchRecords")
                        .HasForeignKey("WinnerPlayerCharacterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("FightingGameServer_Rest.Models.Player", "WinnerPlayer")
                        .WithMany("WonMatchRecords")
                        .HasForeignKey("WinnerPlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LoserPlayer");

                    b.Navigation("LoserPlayerCharacter");

                    b.Navigation("WinnerPlayer");

                    b.Navigation("WinnerPlayerCharacter");
                });

            modelBuilder.Entity("FightingGameServer_Rest.Models.Player", b =>
                {
                    b.HasOne("FightingGameServer_Rest.Models.User", "User")
                        .WithOne("Player")
                        .HasForeignKey("FightingGameServer_Rest.Models.Player", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FightingGameServer_Rest.Models.Skill", b =>
                {
                    b.HasOne("FightingGameServer_Rest.Models.Character", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("FightingGameServer_Rest.Models.Character", b =>
                {
                    b.Navigation("CustomCommands");

                    b.Navigation("LostMatchRecords");

                    b.Navigation("Skills");

                    b.Navigation("WonMatchRecords");
                });

            modelBuilder.Entity("FightingGameServer_Rest.Models.Player", b =>
                {
                    b.Navigation("CustomCommands");

                    b.Navigation("LostMatchRecords");

                    b.Navigation("WonMatchRecords");
                });

            modelBuilder.Entity("FightingGameServer_Rest.Models.Skill", b =>
                {
                    b.Navigation("CustomCommands");
                });

            modelBuilder.Entity("FightingGameServer_Rest.Models.User", b =>
                {
                    b.Navigation("Player");
                });
#pragma warning restore 612, 618
        }
    }
}
