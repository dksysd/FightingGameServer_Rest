// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/chatbot.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace FightingGameServer.Grpc.Generated {
  /// <summary>
  /// 캐릭터 채팅 서비스
  /// </summary>
  public static partial class CharacterChatService
  {
    static readonly string __ServiceName = "chatbot.CharacterChatService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FightingGameServer.Grpc.Generated.InitSessionRequest> __Marshaller_chatbot_InitSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FightingGameServer.Grpc.Generated.InitSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FightingGameServer.Grpc.Generated.InitSessionResponse> __Marshaller_chatbot_InitSessionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FightingGameServer.Grpc.Generated.InitSessionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FightingGameServer.Grpc.Generated.ChatRequest> __Marshaller_chatbot_ChatRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FightingGameServer.Grpc.Generated.ChatRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FightingGameServer.Grpc.Generated.ChatResponse> __Marshaller_chatbot_ChatResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FightingGameServer.Grpc.Generated.ChatResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FightingGameServer.Grpc.Generated.AnalysisRequest> __Marshaller_chatbot_AnalysisRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FightingGameServer.Grpc.Generated.AnalysisRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FightingGameServer.Grpc.Generated.AnalysisResponse> __Marshaller_chatbot_AnalysisResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FightingGameServer.Grpc.Generated.AnalysisResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FightingGameServer.Grpc.Generated.EndSessionRequest> __Marshaller_chatbot_EndSessionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FightingGameServer.Grpc.Generated.EndSessionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FightingGameServer.Grpc.Generated.EndSessionResponse> __Marshaller_chatbot_EndSessionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FightingGameServer.Grpc.Generated.EndSessionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FightingGameServer.Grpc.Generated.ListSessionsRequest> __Marshaller_chatbot_ListSessionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FightingGameServer.Grpc.Generated.ListSessionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::FightingGameServer.Grpc.Generated.ListSessionsResponse> __Marshaller_chatbot_ListSessionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::FightingGameServer.Grpc.Generated.ListSessionsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FightingGameServer.Grpc.Generated.InitSessionRequest, global::FightingGameServer.Grpc.Generated.InitSessionResponse> __Method_InitSession = new grpc::Method<global::FightingGameServer.Grpc.Generated.InitSessionRequest, global::FightingGameServer.Grpc.Generated.InitSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitSession",
        __Marshaller_chatbot_InitSessionRequest,
        __Marshaller_chatbot_InitSessionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FightingGameServer.Grpc.Generated.ChatRequest, global::FightingGameServer.Grpc.Generated.ChatResponse> __Method_Chat = new grpc::Method<global::FightingGameServer.Grpc.Generated.ChatRequest, global::FightingGameServer.Grpc.Generated.ChatResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Chat",
        __Marshaller_chatbot_ChatRequest,
        __Marshaller_chatbot_ChatResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FightingGameServer.Grpc.Generated.AnalysisRequest, global::FightingGameServer.Grpc.Generated.AnalysisResponse> __Method_AnalyzeGameState = new grpc::Method<global::FightingGameServer.Grpc.Generated.AnalysisRequest, global::FightingGameServer.Grpc.Generated.AnalysisResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AnalyzeGameState",
        __Marshaller_chatbot_AnalysisRequest,
        __Marshaller_chatbot_AnalysisResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FightingGameServer.Grpc.Generated.EndSessionRequest, global::FightingGameServer.Grpc.Generated.EndSessionResponse> __Method_EndSession = new grpc::Method<global::FightingGameServer.Grpc.Generated.EndSessionRequest, global::FightingGameServer.Grpc.Generated.EndSessionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EndSession",
        __Marshaller_chatbot_EndSessionRequest,
        __Marshaller_chatbot_EndSessionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FightingGameServer.Grpc.Generated.ListSessionsRequest, global::FightingGameServer.Grpc.Generated.ListSessionsResponse> __Method_ListSessions = new grpc::Method<global::FightingGameServer.Grpc.Generated.ListSessionsRequest, global::FightingGameServer.Grpc.Generated.ListSessionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSessions",
        __Marshaller_chatbot_ListSessionsRequest,
        __Marshaller_chatbot_ListSessionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::FightingGameServer.Grpc.Generated.ChatRequest, global::FightingGameServer.Grpc.Generated.ChatResponse> __Method_StreamChat = new grpc::Method<global::FightingGameServer.Grpc.Generated.ChatRequest, global::FightingGameServer.Grpc.Generated.ChatResponse>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "StreamChat",
        __Marshaller_chatbot_ChatRequest,
        __Marshaller_chatbot_ChatResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::FightingGameServer.Grpc.Generated.ChatbotReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for CharacterChatService</summary>
    public partial class CharacterChatServiceClient : grpc::ClientBase<CharacterChatServiceClient>
    {
      /// <summary>Creates a new client for CharacterChatService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CharacterChatServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CharacterChatService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public CharacterChatServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CharacterChatServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected CharacterChatServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// 세션 초기화
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FightingGameServer.Grpc.Generated.InitSessionResponse InitSession(global::FightingGameServer.Grpc.Generated.InitSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 세션 초기화
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FightingGameServer.Grpc.Generated.InitSessionResponse InitSession(global::FightingGameServer.Grpc.Generated.InitSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitSession, null, options, request);
      }
      /// <summary>
      /// 세션 초기화
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FightingGameServer.Grpc.Generated.InitSessionResponse> InitSessionAsync(global::FightingGameServer.Grpc.Generated.InitSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 세션 초기화
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FightingGameServer.Grpc.Generated.InitSessionResponse> InitSessionAsync(global::FightingGameServer.Grpc.Generated.InitSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitSession, null, options, request);
      }
      /// <summary>
      /// 채팅 대화
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FightingGameServer.Grpc.Generated.ChatResponse Chat(global::FightingGameServer.Grpc.Generated.ChatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Chat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 채팅 대화
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FightingGameServer.Grpc.Generated.ChatResponse Chat(global::FightingGameServer.Grpc.Generated.ChatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Chat, null, options, request);
      }
      /// <summary>
      /// 채팅 대화
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FightingGameServer.Grpc.Generated.ChatResponse> ChatAsync(global::FightingGameServer.Grpc.Generated.ChatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 채팅 대화
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FightingGameServer.Grpc.Generated.ChatResponse> ChatAsync(global::FightingGameServer.Grpc.Generated.ChatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Chat, null, options, request);
      }
      /// <summary>
      /// 게임 상태 분석
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FightingGameServer.Grpc.Generated.AnalysisResponse AnalyzeGameState(global::FightingGameServer.Grpc.Generated.AnalysisRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzeGameState(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 게임 상태 분석
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FightingGameServer.Grpc.Generated.AnalysisResponse AnalyzeGameState(global::FightingGameServer.Grpc.Generated.AnalysisRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AnalyzeGameState, null, options, request);
      }
      /// <summary>
      /// 게임 상태 분석
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FightingGameServer.Grpc.Generated.AnalysisResponse> AnalyzeGameStateAsync(global::FightingGameServer.Grpc.Generated.AnalysisRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnalyzeGameStateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 게임 상태 분석
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FightingGameServer.Grpc.Generated.AnalysisResponse> AnalyzeGameStateAsync(global::FightingGameServer.Grpc.Generated.AnalysisRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AnalyzeGameState, null, options, request);
      }
      /// <summary>
      /// 세션 종료
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FightingGameServer.Grpc.Generated.EndSessionResponse EndSession(global::FightingGameServer.Grpc.Generated.EndSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 세션 종료
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FightingGameServer.Grpc.Generated.EndSessionResponse EndSession(global::FightingGameServer.Grpc.Generated.EndSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EndSession, null, options, request);
      }
      /// <summary>
      /// 세션 종료
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FightingGameServer.Grpc.Generated.EndSessionResponse> EndSessionAsync(global::FightingGameServer.Grpc.Generated.EndSessionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 세션 종료
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FightingGameServer.Grpc.Generated.EndSessionResponse> EndSessionAsync(global::FightingGameServer.Grpc.Generated.EndSessionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EndSession, null, options, request);
      }
      /// <summary>
      /// 활성 세션 목록 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FightingGameServer.Grpc.Generated.ListSessionsResponse ListSessions(global::FightingGameServer.Grpc.Generated.ListSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSessions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 활성 세션 목록 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::FightingGameServer.Grpc.Generated.ListSessionsResponse ListSessions(global::FightingGameServer.Grpc.Generated.ListSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSessions, null, options, request);
      }
      /// <summary>
      /// 활성 세션 목록 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FightingGameServer.Grpc.Generated.ListSessionsResponse> ListSessionsAsync(global::FightingGameServer.Grpc.Generated.ListSessionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSessionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 활성 세션 목록 조회
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::FightingGameServer.Grpc.Generated.ListSessionsResponse> ListSessionsAsync(global::FightingGameServer.Grpc.Generated.ListSessionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSessions, null, options, request);
      }
      /// <summary>
      /// 스트림 채팅 (실시간)
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::FightingGameServer.Grpc.Generated.ChatRequest, global::FightingGameServer.Grpc.Generated.ChatResponse> StreamChat(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamChat(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// 스트림 채팅 (실시간)
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncDuplexStreamingCall<global::FightingGameServer.Grpc.Generated.ChatRequest, global::FightingGameServer.Grpc.Generated.ChatResponse> StreamChat(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamChat, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override CharacterChatServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CharacterChatServiceClient(configuration);
      }
    }

  }
}
#endregion
